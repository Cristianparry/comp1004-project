<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Manager</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }

        h2 {
            color: #333;
        }

        form input {
            margin: 5px 0;
            padding: 8px;
        }

        button {
            padding: 10px;
            cursor: pointer;
            border: none;
            color: white;
            font-size: 16px;
            border-radius: 5px;
        }

        .hidden {
            display: none;
        }

        #error {
            color: red;
        }

        .account-item {
            margin-bottom: 10px;
        }

        .password {
            display: none;
            font-weight: bold;
        }

        /* Styling the buttons */
        #loginBtn, #logoutBtn, #settingsBtn, #backToDashboardBtn {
            background-color: #003366; /* Dark blue */
        }

        #showPasswordBtn {
            background-color: #D3D3D3; /* Light grey */
            color: black;
        }

        /* Add hover effects for buttons */
        #loginBtn:hover, #logoutBtn:hover, #settingsBtn:hover, #backToDashboardBtn:hover {
            background-color: #0055A4; /* Lighter blue on hover */
        }

        #showPasswordBtn:hover {
            background-color: #C0C0C0; /* Darker grey on hover */
        }

        /* Positioning logout, settings, and back to dashboard buttons */
        #logoutBtn, #backToDashboardBtn {
            position: fixed;
            bottom: 20px;
            left: 20px;
        }

        #settingsBtn {
            position: fixed;
            bottom: 70px;
            left: 20px;
        }

        #dashboardSection, #settingsSection {
            margin-bottom: 100px; /* So buttons do not overlap content */
        }

        /* Styling for settings page */
        #settingsSection h3 {
            margin-top: 20px;
        }

        .account-item button {
            margin-left: 10px;
        }

        .form-section {
            margin-bottom: 20px;
        }

        /* New Delete Account Section */
        #deleteAccountSection {
            margin-top: 30px;
            background-color: #f8d7da;
            padding: 10px;
            border: 1px solid #f5c6cb;
            border-radius: 5px;
        }

        /* Edit/Delete Account Section */
        #editAccountSection {
            margin-top: 30px;
            background-color: #d1ecf1;
            padding: 10px;
            border: 1px solid #bee5eb;
            border-radius: 5px;
        }
    </style>
</head>
<body>

    <!-- Login Section -->
    <div id="loginSection">
        <h2>Login</h2>
        <form id="loginForm">
            <div class="form-section">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" required><br><br>
            </div>
            <div class="form-section">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" required><br><br>
            </div>
            <button type="submit" id="loginBtn">Login</button>
        </form>
        <div id="error" class="hidden" aria-live="assertive">Incorrect username or password</div>
    </div>

    <!-- Dashboard Section -->
    <div id="dashboardSection" class="hidden">
        <h2>Welcome to your dashboard</h2>

        <!-- User info display -->
        <div id="userInfo"></div>

        <h3>Your Saved Accounts:</h3>
        <ul id="accountList"></ul>

        <h3>Add New Account</h3>
        <form id="accountForm">
            <label for="website">Website:</label>
            <input type="text" id="website" required><br><br>
            <label for="accountUsername">Username:</label>
            <input type="text" id="accountUsername" required><br><br>
            <label for="accountPassword">Password:</label>
            <input type="password" id="accountPassword" required><br><br>
            <button type="submit">Save Account</button>
        </form>

        <!-- Buttons -->
        <button id="settingsBtn">Settings</button>
        <button id="logoutBtn">Logout</button>
    </div>

    <!-- Settings Section for Dashboard Page -->
    <div id="settingsDashboardPage" class="hidden">
        <h2>Settings Page (Dashboard)</h2>
        <h3>Manage Saved Accounts</h3>
        <ul id="settingsAccountList" aria-live="polite"></ul>

        <!-- Edit/Delete Account Section -->
        <div id="editAccountSection">
            <h3>Edit/Delete Your Saved Accounts</h3>
            <p>You can edit or delete your saved accounts below.</p>
            <ul id="editAccountList"></ul>
        </div>

        <!-- New Delete Account Section -->
        <div id="deleteAccountSection">
            <h3>Delete Your Account</h3>
            <p>If you wish to delete your account, click the button below. This action cannot be undone.</p>
            <button id="deleteAccountBtn">Delete Account</button>
        </div>

        <button id="backToDashboardBtn">Back to Dashboard</button>
        <button id="logoutFromSettingsBtn">Logout</button>
    </div>

    <script>
        // Fake user data for demonstration purposes
        const users = [
            { "username": "Cristian", "password": "password123" },
            { "username": "John", "password": "mypassword" }
        ];

        // Check if the user is logged in
        function checkLogin() {
            const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser'));
            if (loggedInUser) {
                showDashboard(loggedInUser);
            } else {
                showLogin();
            }
        }

        // Show the login page
        function showLogin() {
            document.getElementById('loginSection').classList.remove('hidden');
            document.getElementById('dashboardSection').classList.add('hidden');
            document.getElementById('settingsDashboardPage').classList.add('hidden');
            document.getElementById('logoutBtn').classList.add('hidden');
        }

        // Show the dashboard page
        function showDashboard(loggedInUser) {
            document.getElementById('loginSection').classList.add('hidden');
            document.getElementById('dashboardSection').classList.remove('hidden');
            document.getElementById('settingsDashboardPage').classList.add('hidden');
            document.getElementById('logoutBtn').classList.remove('hidden');
            document.getElementById('settingsBtn').classList.remove('hidden');

            // Display logged-in user's name in userInfo
            document.getElementById('userInfo').textContent = `Logged in as: ${loggedInUser.username}`;

            // Display saved accounts
            displaySavedAccounts();
        }

        // Display saved accounts from localStorage
        function displaySavedAccounts() {
            const accounts = JSON.parse(localStorage.getItem('accounts')) || [];
            const accountList = document.getElementById('accountList');
            accountList.innerHTML = '';
            accounts.forEach((account) => {
                const listItem = document.createElement('li');
                listItem.classList.add('account-item');

                const accountInfo = document.createElement('div');
                accountInfo.textContent = `Website: ${account.website}, Username: ${account.username}`;
                listItem.appendChild(accountInfo);

                const passwordDisplay = document.createElement('span');
                passwordDisplay.classList.add('password');
                passwordDisplay.textContent = `Password: ${account.password}`;
                listItem.appendChild(passwordDisplay);

                const showPasswordButton = document.createElement('button');
                showPasswordButton.textContent = 'Show Password';
                showPasswordButton.onclick = function () {
                    const passwordField = listItem.querySelector('.password');
                    passwordField.style.display = passwordField.style.display === 'none' ? 'block' : 'none';
                    showPasswordButton.textContent = passwordField.style.display === 'none' ? 'Show Password' : 'Hide Password';
                };
                listItem.appendChild(showPasswordButton);

                accountList.appendChild(listItem);
            });
        }

        // Display accounts in settings page (dashboard)
        function displaySettingsAccounts() {
            const accounts = JSON.parse(localStorage.getItem('accounts')) || [];
            const settingsAccountList = document.getElementById('settingsAccountList');
            settingsAccountList.innerHTML = '';
            accounts.forEach((account, index) => {
                const listItem = document.createElement('li');
                listItem.classList.add('account-item');

                // Display website and username
                const accountInfo = document.createElement('div');
                accountInfo.textContent = `Website: ${account.website}, Username: ${account.username}`;
                listItem.appendChild(accountInfo);

                // Edit password button
                const editButton = document.createElement('button');
                editButton.textContent = 'Edit Password';
                editButton.onclick = function () {
                    const newPassword = prompt("Enter the new password:", account.password);
                    if (newPassword) {
                        account.password = newPassword;
                        localStorage.setItem('accounts', JSON.stringify(accounts));
                        displaySettingsAccounts(); // Refresh the list
                    }
                };
                listItem.appendChild(editButton);

                // Delete account button
                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete Account';
                deleteButton.onclick = function () {
                    accounts.splice(index, 1); // Remove the account from the array
                    localStorage.setItem('accounts', JSON.stringify(accounts));
                    displaySettingsAccounts(); // Refresh the list
                };
                listItem.appendChild(deleteButton);

                settingsAccountList.appendChild(listItem);
            });
        }

        // Handle settings button (dashboard page) click
        document.getElementById('settingsBtn').addEventListener('click', function () {
            displaySettingsAccounts();
            document.getElementById('settingsDashboardPage').classList.remove('hidden');
            document.getElementById('dashboardSection').classList.add('hidden');
        });

        // Handle delete account button (settings page)
        document.getElementById('deleteAccountBtn').addEventListener('click', function () {
            if (confirm("Are you sure you want to delete your account? This action cannot be undone.")) {
                localStorage.removeItem('loggedInUser');
                localStorage.removeItem('accounts');
                alert('Your account has been deleted.');
                showLogin();
            }
        });

        // Handle back to dashboard button (settings page)
        document.getElementById('backToDashboardBtn').addEventListener('click', function () {
            showDashboard(JSON.parse(localStorage.getItem('loggedInUser')));
        });

        // Handle logout button (settings page from dashboard)
        document.getElementById('logoutFromSettingsBtn').addEventListener('click', function () {
            localStorage.removeItem('loggedInUser');
            showLogin();
        });

        // Handle logout button (dashboard page)
        document.getElementById('logoutBtn').addEventListener('click', function () {
            localStorage.removeItem('loggedInUser');
            showLogin();
        });

        // Handle login form submission
        document.getElementById('loginForm').addEventListener('submit', function (event) {
            event.preventDefault();
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            const user = users.find(u => u.username === username && u.password === password);

            if (user) {
                localStorage.setItem('loggedInUser', JSON.stringify(user));
                showDashboard(user);
            } else {
                document.getElementById('error').classList.remove('hidden');
            }
        });

        // Check login status when the page loads
        checkLogin();
    </script>
</body>
</html>
